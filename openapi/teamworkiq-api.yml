openapi: "3.0.1"
info:
  title: "TeamworkIQ API"
  version: "3.2.2"
  "x-logo":
    "url": "https://teamworkiq.com/wp-content/uploads/2019/10/logo-teamworkiq.svg"
    "altText": "TeamworkIQ logo"
    backgroundColor: "#FFFFFF00"
    href: "https://teamworkiq.com"
  description: |
    Copyright &copy; 2016-2020 TeamworkIQ. All Rights Reserved. Use subject to [Terms of Service](https://teamworkiq.com).


    # Introduction

    Welcome to the TeamworkIQ REST/JSON API.

    TeamworkIQ is the remarkably simple solution to Business Process Managment
    and Workflow Automation for your organization.

    Developers use this API to automate the core features of
    TeamworkIQ and integrate TeamworkIQ-powered workflow processes
    with other applications.

    This API is designed for developers who are familiar with the concepts
    of REST and JSON. REST/JSON APIs are among the most widely used types of
    APIs for software applications today. REST/JSON APIs can be used with
    virutally any programming language. Nearly all programming
    languages today support REST/JSON APIs. If you are not familar with
    the concepts of REST/JSON APIs,
    [learn more here](https://www.smashingmagazine.com/2018/01/understanding-using-rest-api/).

    ## What makes TeamworkIQ simple

    A **workflow** or **process** is the sequence of steps through which a
    desired outcome is achieved.

    To simplify Workflow Automation, TeamworkIQ models processes as simple
    collaborative checklists composed of **tasks**. Complicated or multi-
    step tasks may be subdivided into smaller **sub-tasks**. Tasks that are
    composed of sub-tasks are referred to as **list** tasks. Tasks that have
    no sub-tasks are **basic** tasks. **Numbered Lists** specify that tasks
    should be completed in sequence. **Bullet lists** specify that tasks
    may be completed in any order, and may be completed in parallel.

    For example:

    -------------------------------

        1. Milestone 1
        2. Milestone 2
            1. First Stage of Milestone 2
            2. Second Stage of Milestone 2
                ●  Parallel task A
                    1. First step of "A"
                    2. Second step of "A"
                ●  Parallel task B
                    ●  Part of "B"
                    ●  Another part of "B"
            3. Third Stage of Milestone 2
        3. Milestone 3

    --------------------------------

    To automate a process, simply document the process steps as an outline.
    Add process roles, assignments, instructions, forms, due dates, and other
    process elements as needed.

    TeamworkIQ also supports reopening tasks,
    [repeating sequences](https://help.teamworkiq.com/en/articles/4158569),
    [decision points](https://help.teamworkiq.com/en/articles/4158666)
    and other flow-of-control concepts.

    TeamworkIQ attributes an app's actions to a fictitious "robot user"
    that has the same name as the app.

    # API Concepts
  
    ## Accounts, Users and User Groups
  
    A user, user group or API client is called an **actor**.
  
    ### Users
    
    A **user** in TeamworkIQ is anyone who has a sign in credential.
    Each email address corresponds to exactly one TeamworkIQ user.
    A user may be a member of multiple TeamworkIQ accounts. For example,
    a consultant might belong to 3 accounts: one for her own business
    and the others belonging to several of her clients.

    ### Accounts

    A user can create **accounts**. A user can also be invited to join other
    accounts. A user who creates or joins an account becomes a **member** of
    that account.

    For information on other account roles, see
    [TeamworkIQ API: Users and Account Roles](https://help.teamworkiq.com/en/articles/4152206).

    ### User Groups
  
    An account also contains **user groups**:
    
      * `_members`: the group of all the account's members
      * `_admins`: the group of all the account's admins
      * `_template_creators`: the group of all the account's template creators
    
    ## Apps and API Keys
  
    An **app** is an API client program. An app always belongs to an account. The
    app identifies itself to the TeamworkIQ API using an **API Key**. See
    [Authentication](#section/Authentication).
  
    ## Processes and Process Templates
    
    In TeamworkIQ, a **process** is a single instance of a workflow.
    The execution of every process is controlled by a process model.
    
    A **process model** defines a workflow, specifying the tasks to be
    performed, the roles that actors play within the workflow
    and other workflow properties.
  
    A **process template** defines a process model for a repeatable
    or recurring workflow. Users or API programs can launch processes
    based on the template. For example, if a process template specifies
    a Customer Onboarding workflow, then this template may be used
    to launch Customer Onboarding processes for specific customers.
  
    ### Template Revisions (draft and published)
  
    A process template is versioned. A template owner edits the **draft**
    revision. When the new revision is ready for use, the owner may
    publish it. The published revision can then be used as follows:
     
     * Users who have **view** privileges for the template can see the
       published revision.
     * Actors who have **launch** privileges for the template can
       launch processes based on the published revision.
    
    A new draft revision can then be created, if necessary, so that the
    owner can make changes without interfering with others' use of the
    published revision.
    
    ### Single-use processes
  
    Although most processes are launched from templates, an actor
    may also create and start a single-use process without using a
    template.
    
    ### The contents of a process model
    
    A process model specifies:
    
     * The tasks that comprise the workflow, including task structure, assignments, due dates and more.
     * The process roles played by actors who participate in the workflow, and assigns these roles to users
     * The fields that are used to collect data during task completion
     * Other metadata about the process, such as name and tags.
    
    ## Process roles

    A **process role** defines the role that certain participants play in the
    workflow. Each process model may define custom roles, such as "Customer",
    "VP", "Approver" and – if a process requires a specific person, rather
    than a job function – a role like "Janice Radaic".
    
    The most common use of process roles is that they are assigned responsibilities
    within the process. Specifically, when a process model assigns a set of tasks
    to a role, the assignees of the role are responsible for completing these tasks.

    ### Role Types
    
    Every process role has a type. Role Types include:

    * Job Roles - e.g. "Customer", "VP of Sales", "HR Staff" or "Applicant"
    * User Roles - e.g. "Janice Radic"
    * Process Owner Role - A special, built-in role. See below.
  
    A **Job Role** represents a named job function that is required
    by the process. The job function might be process-specific
    (e.g. "Scholarship Applicant") or it might require someone  with a
    particular department, specialization or title. A Job Role may be
    assigned to more than one user, so a role like "Accounts Payable" might
    be assigned to the 3 members of that department. A Job Role can be
    left unassigned at first, and assigned by a process owner later on.
    
    A **User Role** is used when the process is designed to require
    the participation of one specific person, rather than the
    participation of whichever users have the required position or
    relationship to the process.
    
    ### Process Owners
    
    Every process also has a special **Process Owner** role. The owners of a
    process manage that process. They are responsible for monitoring
    the process and resolving any issues that arise. Accordingly, they can view,
    pause, edit, update, resume, or stop that process. They can edit any aspect
    of the process, including tasks, assignments, and due dates. They can
    reopen or complete tasks for others if necessary.
    
    ### Role numbers and references
  
    Every role has a **role number**, which uniquely identifies the role
    within the process model. The built-in "Process Owner" role has role
    number 1001. The role number of every other role must be greater
    than 2000 and less than 3001.
  
    In a process model, all custom process roles MUST be defined in the
    `process_roles` section of the model. The Process Owner role
    is built into TeamworkIQ, so the process model does not define it
    and it will not appear in the `process_roles` section.
  
    A general overview of Process Roles may be found
    [here](https://help.teamworkiq.com/en/articles/4153079).
  
    Learn more about using Process Roles with the TeamworkIQ API
    [here](https://help.teamworkiq.com/en/articles/4154133).
  
    ## Tasks
    
    A process model specifies the **tasks** that comprise a workflow.
    Tasks form a natural hierarchy; complicated tasks may be modeled as list
    tasks, which are divided into sub-tasks. A list task controls the
    sequence in which its sub-tasks may be performed.
    
    The fact that a list task controls the execution of its subtasks
    is a key feature of TeamworkIQ. Every task is performed within the
    context of its parent, and it is the context that determines what
    happens when the task is completed, reopened or skipped, or when
    something goes wrong.

    The common alternative – forcing every task to know all
    about what happens next and to control the transitions to all next
    steps – would lead to complex, monolithic processes that would be
    very difficult to manage.

    ### Task types

    Every task has a type:
    
     * `twiq.basic.task`: A Basic Task is a single-part actionable task.
       It is a "leaf node" within the tree. It must NEVER contain sub-tasks.
     * `twiq.numbered.list`: A Numbered List Task specifies that its
       subtasks are performed sequentially, in the specified order.
       Every Numbered List MUST contain sub-tasks. An empty list is forbidden.
     * `twiq.bullet.list`: A Bullet List Task specifies that its
       subtasks can be performed in any order, or even in parallel.
       Every Bullet List MUST contain sub-tasks. An empty list is forbidden.
  
    ### The root task
  
    The root of a process model's task tree is a special **root task**
    that is hidden from process participants. The root task is always
    a list task: either a Numbered List or a Bullet List.
    
    ### Task number
    
    Every task has a **task number**, which uniquely identifies the task
    within the process model. The number of the root task MUST
    be 5001. The number of every other task must be greater
    than 5001 and less than 8001.
  
    ### The tasks array and the task hierarchy
  
    The process model contains an ordered `tasks` array. The order
    of the array shows how the tasks are arranged vertically when
    viewed as a checklist. The task hierarchy within the checklist
    is specified by the `parent_no` properties of the tasks.
    
    Thus, to specify the following task hierarchy...
  
    -------------------------------
  
        1. Milestone 1
            1. Step 1.1
            2. Step 1.2
        2. Milestone 2
            1. Step 2.1
            2. Step 2.2
                ● Parallel task A
                ● Parallel task B
        3. Milestone 3
  
    --------------------------------
  
    ... a process model would include the following `tasks` array:
  
    ```
    [
       { "task_no": 5001, ... },
       { "task_no": 5002, "parent_no": 5001, "Milestone 1", ... },
       { "task_no": 5005, "parent_no": 5002, "Step 1.1", ... },
       { "task_no": 5006, "parent_no": 5002, "Step 1.2", ... },
       { "task_no": 5003, "parent_no": 5001, "Milestone 2", ... },
       { "task_no": 5010, "parent_no": 5003, "Step 2.1", ... },
       { "task_no": 5011, "parent_no": 5003, "Step 2.2", ... },
       { "task_no": 5021, "parent_no": 5011, "Parallel task A" },
       { "task_no": 5020, "parent_no": 5011, "Parallel task B" },
       { "task_no": 5004, "parent_no": 5001, "Milestone 3", ... }
    ]
    ```
    
    ### Task role numbers
  
    Every task is assigned to a role. The role can be assigned to users.
    
    The task's `role_no` property specifies the role to which the task is
    assigned. The assignees of this role are responsible for completing the
    task; we call them the "assignees of the task".
  
    The root task (task 5001) is always assigned to the Process Owner role
    (role 1001).
  
    If a task does not specify a `role_no` value, then it automatically
    inherits the role of its parent task. Thus, any subtasks in a list
    that do not specify the `role_no` property are automatically
    assigned to the same role as the list task.
    
    Consider the following example.
  
    | Task | Task hierarchy    | role_no | role_no_actual | Inherit role_no_actual from... |
    |------|-------------------|---------|----------------|----------------|
    | 5001 | Root Task | 1001 | 1001 | |
    | 5002 | &nbsp;&nbsp; 1. Milestone 1 | 2001 | 2001 | |
    | 5005 | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. Step 1.1 | | 2001 | 5002 |
    | 5006 | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. Step 1.2 | | 2001 | 5002 |
    | 5003 | &nbsp;&nbsp; 2. Milestone 2 | 2002 | 2002 | |
    | 5010 | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. Step 2.1 | 2001 | 2001 | |
    | 5011 | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. Step 2.2 | | 2002 | 5003 |
    | 5021 | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ● Task A | | 2002 | 5003 |
    | 5020 | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ● Task B | 2003 | 2003 | 5003 |
    | 5004 | &nbsp;&nbsp; 3. Milestone 3 | | 1001 | 5001 |

    In the example, task 5021 is to be completed by the assignees of
    role 2002. Task 5021 inherits the "actual role number" from its
    parent (task 5011). Task 5011 inherits the "actual role number"
    from its parent (task 5003).
    
    In the example, task 5004 is to be completed by the process owners.
    It inherits role 1001 from its parent (task 5001, the root task).
    
    The default situation, if no custom process roles are defined as part of
    the process model, is that the root task is assigned to Process Owner,
    and all other tasks inherit that role from their parents. Therefore,
    all tasks are assigned to the process owners.
  
    ## Task Forms, Launch Form and Form Fields
  
    ### Task Forms
    
    In a process model, each task may include a **task form**. A task
    form enables task assignees to enter, save, and submit the information
    requested for that task.
  
    ### Launch Form
  
    A process template may also define a **launch form** that specifies the
    information that is required to launch or start a process. The launch
    form is modeled as the task form of the (hidden) root task. The fields
    of the launch form are also referred to as the **launch parameters** of the
    template.
  
    ### Form Fields
  
    Each form consists of one or more **fields**. Fields control data submission
    and storage of data within a process.

    The process model must contain a **field definition** for each field.
    This definition specifies the field name, type, help text, default
    value and other information.
    
    The data for a task form is represented as a JSON object whose
    property names are the names of the fields and whose property
    values are the values of the fields. For example, if we have a text
    field named "hello", a textarea named "blurb", a date-time field
    named "birthday" and a checkbox field named "some-countries", the
    following might be submitted as a data value:
    
    
    ```
    {
      "hello": "world",
      "blurb": "Lorem ipsum dolor\nsit amet.",
      "birthday": "946713600000",
      "some-countries": [ "US", "UK", "DE", "PE" ]
    }
    ```
    
    ### Built-in Fields
    
    TeamworkIQ also provides a number of **built-in fields**, which provide
    certain information about the process iself. The values of these fields
    are set when the process is started.
    
    Field definitions for the built-in fields are available in the
    [Info section of the API](/api/docs/#tag/Info-API).
    
    ### Field references and variable expressions
    
    Certain properties within a process model may contain references
    to fields.
    
     * **Relative due dates** are specified relative to date fields
       (e.g. 24 hours after process-started-hour).
     * Task `text` values can include **variable expressions**.
    
    A variable expression is delimited by curly braces, like `{my-field-name}`.
    The expression may specify only a field name, or it may specify a field name
    and a format string:
    
     * `{my-field-name}`
     * `{my-field-name:format-string}`
     
    #### Formats for `date-time` fields

    The following formats are available for variables that reference date-time fields:
    
    | Format | Example                   | Description          |
    |--------|---------------------------|----------------------|
    | `full` | `Sep 9, 2020 5:00 PM GMT` | Full date and time. This is the default format. |
    | `yyyy` | `2020` | Year |
    | `year` | `2020` | Year |
    | `month` | `September` | Month name |
    | `mmmm`  | `September` | Month name |
    | `mon` | `Sep` | Month name, abbrev. |
    | `mmm` | `Sep` | Month name, abbrev. |
    | `mm` | `09` | Month no, 2 digits |
    | `m` | `9` | Month no, 1-2 digit |
    | `date` | `3` | Day of the month, 1-2 digits |
    | `timezone` | `PDT` | Timezone name |
    | `d` | `3` | Day of the month, 1-2 digits |
    | `dd` | `03` | Day of the month, 2 digits |
    | `weekday` | `Thursday` | Day of the week |
    | `day` | `Thu` | Day of the week |
    | `time` | `3:45 pm` | Time, 12 hours |
    | `time24` | `15:45` | Time, 24 hours |
    | `hhmm` | `1545` | Time, 24 hours |
    | `d mmm yyyy` | `3 Sep 2020` | Date |
    | `mmm d yyyy` | `Sep 3, 2020` | Date |
    | `yyyy-mm-dd` | `2020-03-15` | Date |
    | `mm-dd-yyyy` | `03-15-2020` | Date |
    | `yyyy.mm.dd.hhmm` | `2020.03.15.1545` | Date |
    
    #### Formats for `select`, `checklist group`, `radio group` and `autocomplete` fields
  
    The following formats are available for variables that reference the various selection fields:
  
    | Format   | Example                  | Description          |
    |----------|--------------------------|----------------------|
    | `labels` | `Utah, Colorado, Kansas` | Comma-separated list of field labels |
    | `values` | `UT, CO, KS`             | Comma-separated list of the actual field values |
    
    #### Other field types
    
    The values of `text`, `textarea`, `hidden` and `number` fields have no associated format strings.
    
    Fields of type `file`, `header` and `paragraph` cannot be rendered with variable expressions.
        
    ## Process activity stream
    
    TeamworkIQ supports an activity stream that allows client programs to
    retrieve process history and track process, task, role and field data
    events.
    
    The Activity Stream feature can be used part of an audit trail mechanism,
    or it can be used to trigger actions in external systems as events are
    detected in a process.
    
    In most cases, a client program will focus its activity stream monitoring
    on a single process, or on processes that are based on a single template
    or a set of related templates. In many cases, too, a client program is only
    interested in certain tasks, roles or fields that belong to certain templates.
    
    Suppose that a client program is designed to perform an action when
    a task 5043 is completed in a certain workflow. The client should
    monitor processes that are based on one process template, and should
    only track TASK_COMPLETED activities for task 5043.
    
    However, such a client might also want to respond if task 5043 is reopened,
    so perhaps TASK_REOPENED activities should also be tracked.
    
    # Requests and Responses

    ## URI paths

    Parameters that identify the target of a request appear only in the
    URI path. The URI path is structured like:

      `/api/v3/{resource type}/{resource-specific path}`

    For example:

    **Information** resource paths look like this:

     - `/api/v3/info/{acc}/access`
     - `/api/v3/info/{acc}/info`
     - ...

    **Template** resource paths look like this:

     - `/api/v3/templates/{acc}/{tpl_no}/{params}`
     - `/api/v3/templates/{acc}/{tpl_no}/commands/{command}`
     - ...

    **Process instance** resource paths look like this:

     - `/api/v3/processes/{acc}/{process_no}/{params}`
     - `/api/v3/processes/{acc}/{process_no}/commands/{command}`
     - ...


    ## Request Body

    If a request requires a body (the data that's usually provided with a POST
    or PUT), its content type is ALWAYS JSON. No other format, unless otherwise
    specified (e.g. TXT, HTML or XML), is ever accepted.

    # Testing and troubleshooting requests

    When in doubt, use cURL, Postman or another transparent third-party HTTP
    client to test your API request. If you need to ask Support for help,
    please be sure that you can explain your API questions or issues using cURL.
    
    NEVER send your API keys in support requests, images or messages to us. If needed
    replace your API Keys in messages to us with a string like "*********************"

    When you interact with the TeamworkIQ API, remember that you are interacting
    with your organization's live data and your live systems. If you need to test
    integrations, consider using a separate TeamworkIQ Account as a development
    or staging environment for testing. That way there will be no possibility of
    impact to live systems or processes during your development cycles.


    # Help, Support, and Feedback

    ## Feedback

    Help us make the TeamworkIQ APIs better for you! Share your feedback, use cases,
    and suggestions via the chat app icon in the lower right corner of this page.

    ## Help Docs

    Need help? Find additional API information at
    [help.teamworkiq.com](https://help.teamworkiq.com)

    ## Developer support

    Need support? Get it via the chat app icon in the lower right corner of
    this page.

    ## Reporting Issues to Support

    If you need to contact support about an issue, prepare by gathering information
    as described in [How to Report API Issues](https://help.teamworkiq.com/en/articles/3687885).
    Providing the requested information and replicating the issue with cURL or Postman
    first can significantly reduce the turnaround time for a support request.

    # API Limits

    See [API Limits](https://help.teamworkiq.com/en/articles/3687339).

servers:
  - url: "https://api.teamworkiq.com/api"
    description: TeamworkIQ APIs
paths:
  /v3/info/{acc}/access:
    get:
      summary: "Verify account access"
      tags:
        - Info API
      description: |
        This operation checks whether the client's API Key successfully authenticates
        the client to the TeamworkIQ API and whether the API key permits access to the account.

        This operation does not depend on account resources such as templates or processes.
        It has no side effects. It is a good choice if you are doing development and want
        to verify that your client is able to access the API.

        The API returns status 200 if all of the following are true:

         - The account is active.
         - The account is permitted to use API features.
         - The API Key is valid.
         - The API Key provides access to the account.

        The API returns 401 if any of the following is true:

         - The account is not active.
         - The account does not allow API access.
         - The API Key is invalid.
         - The API Key does not provide access to the account.

        Several other statuses are possible.
      parameters:
        - name: "acc"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Account number
          example: 12345
      responses:
        200:
          description: Success
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/info/{acc}/access"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/info/{acc}/access`);

      x-ignore-this: ignore this
  /v3/info/{acc}/builtin-fields:
    get:
      summary: "Get built-in fields"
      tags:
        - Info API
      description: |
        Returns a list of built-in, read-only fields that may be referenced from template
        and process models without being defined by the process or template author.

        In most cases, you will only use the built-in fields (see above).
      parameters:
        - name: "acc"
          in: "path"
          required: true
          description: Account number
          schema:
            type: "integer"
          example: 12345
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuiltinFieldsResponse"
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        429:
          description: Throttled or Quota exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/info/{acc}/builtin-fields"
      x-ignore-this: ignore this
  /v3/info/{acc}/info:
    get:
      summary: "Get account quotas and metadata"
      tags:
        - Info API
      description: "Returns account information."
      parameters:
        - name: "acc"
          in: "path"
          required: true
          description: Account number
          schema:
            type: "integer"
            example: 12345
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountLimits"
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/info/{acc}/info"
      x-ignore-this: ignore this
  /v3/accounts/{acc}/users:
    get:
      summary: "List users"
      tags:
        - Account API
      description: |
        This operation returns a list of the users who are now (or have ever been) associated
        with the specified TeamworkIQ team account. This operation is read-only;
        it has no side effects. The list of users includes both people (human users)
        and robots (the artificial "users" that represent your account's apps).

        For more information about users and their roles within the account, see
        [TeamworkIQ API: Users and Account Roles](https://help.teamworkiq.com/en/articles/4152206).
      parameters:
        - name: "acc"
          in: "path"
          required: true
          description: Account number
          schema:
            type: "integer"
          example: 12345
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/UserSummaries"
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/accounts/{acc}/users"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/accounts/{acc}/users`);

      x-ignore-this: ignore this
  /v3/accounts/{acc}/groups:
    get:
      summary: "List user groups"
      tags:
        - Account API
      description: |
        This operation returns a list of the user groups that belong to the specified TeamworkIQ
        team account. This operation is read-only. It has no side effects.

        More information about TeamworkIQ user groups may be found in
        [TeamworkIQ API: User Groups](https://help.teamworkiq.com/en/articles/4152281).
      parameters:
        - name: "acc"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Account number
          example: 12345
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupSummary"
                example:
                  - group_no: 54339
                    name: _members
                    status: ACTIVE
                  - group_no: 54340
                    name: _admins
                    status: ACTIVE
                  - group_no: 54341
                    name: _template_creators
                    status: ACTIVE
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/accounts/{acc}/groups"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/accounts/{acc}/groups`);

      x-ignore-this: ignore this
  /v3/activities/{acc}/process:
    get:
      summary: "Query process activities"
      tags:
        - Activity Stream API
      description: |
        This operation queries the account's process activity stream,
        returning a record of process activities such as `PROC_STARTED`
        and `TASK_COMPLETED`.

        Overly broad queries will perform poorly, so ALWAYS use the
        query parameters – especially the `template` parameter – 
        to restrict the scope of your query.
      parameters:
        - name: acc
          in: path
          required: true
          schema:
            type: integer
          description: Account number
          example: 12345
        - name: template
          in: query
          required: true
          schema:
            type: integer
            format: int32
          description: Template number
          example: 12345
        - name: task
          in: query
          required: false
          schema:
            type: integer
            format: int32
          description: |
            Task number.

            If this parameter is specified, then the server should only
            return activities that are associated with the specified task.
          example: 5002
        - name: types
          in: query
          required: false
          schema:
            type: string
            format: csv
          description: |
            A comma-separated-values string, where the values are Activity Types.

            If this parameter is specified, then the server should only return
            activities whose types are included in the specified list.
          example: "TASK_COMPLETED,TASK_SKIPPED"
        - name: after
          in: query
          required: false
          schema:
            type: integer
            format: int64
          description: |
            Number of msec since midnight Jan 1, 1970 UTC.

            If this parameter is specified, then the operation is to
            return only activities whose timestamps are greater than
            this value.

            If this parameter is NOT specified, then the default is
            24 hours before the current moment.
          example: 1581001439775
        - name: until
          in: query
          required: false
          schema:
            type: integer
            format: int64
          description: |
            Number of msec since midnight Jan 1, 1970 UTC.

            If this parameter is specified, then the operation is to
            return only activities whose timestamps are less than or
            equal to this value.

            If no value is specified, the default is the current moment.
          example: 1581001439775
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessActivityResp"
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/activities/{acc}/process?template={tpl}"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/activities/{acc}/process?template={tpl}`);

      x-ignore-this: ignore this
  /v3/processes/{acc}/{pro}/data:
    get:
      summary: "Get published field data for a process"
      tags:
        - Process API
      description: |
        This operation gets all published field data for all of the form
        fields and built-in fields of a process.

        When a form is submitted, the updated field values are stored
        as a *draft submission* until the data is *published*. See
        [Life cycle of form submissions](https://help.teamworkiq.com/en/articles/4106911).

        The value returned by this operation is a JSON object. The
        property names are the names of all fields in the process that
        have published values, plus the names of all of the "built-in"
        fields such as `process-link`. The values of the properties are
        the values of the fields.
      parameters:
        - name: acc
          in: path
          required: true
          schema:
            type: integer
          description: Account number
          example: 12345
        - name: pro
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: Process number
          example: 123
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FieldValuesWithBuiltinFields"
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/processes/{acc}/{pro}/data"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/processes/{acc}/{pro}/data`);

      x-ignore-this: ignore this
  /v3/files/{acc}/{pro}/{file}/download:
    get:
      summary: "Get File Download Information"
      tags:
        - File API
      description: |
        This operation gets the File Download Information for a file
        that has been attached/uploaded though a `file` type field
        in a task form.
  
        The File Download Information is a JSON object that contains a
        `download_url` property. The value of the download url is a short-lived,
        signed, download URI that can be used to securely download the actual file.
  
        The download URI is 'short-lived' because it expires in 15 minutes. It grants
        access to an object in an Amazon Web Services S3 bucket.
        A simple GET request to the signed S3 URI retrieves the file value
        of the form field.
        
        When sending requests to the S3 URI, do **not** include your TeamworkIQ credentials.

        See also
        [TeamworkAPI: File Download](https://help.teamworkiq.com/en/collections/4134237).
  
        ### File Download Information URI vs. File Download URI
  
        How can your client download files that have been attached to a process?

        When the client fetches the process data, the value returned by each
        File field contains an array of File Info objects. Each File Info object
        has a `url` property that specifies the File Download Information URI for
        one uploaded file.

        The File Download Information URI is long-lived. Unlike the
        short-lived S3 URI, the File Download Information URI does
        *not* expire after 15 minutes. Your client application may safely
        persist the File Download Information URI for later use.

        Remember that there are two different URIs:

         * The `.../download` URI returns a File Download Information
           object, not the file itself.

         * The `download_url` of the File Download Information object specifies
           a short-lived URI that allows your client to download the file.
  
        ### Warnings
  
        #### Short-lived download_url is sensitive information
  
        While the short-lived S3 URI remains valid (for 15 minutes),
        it allows a client to directly download the target file.
        If the target file contains sensitive information, you must treat
        this URI as though it were a password.
        
        Fetch the File Download Information object only when you need to use
        it immediately. After you have downloaded the target file, destroy
        the File Download Information object.
        
        A client program should **never** do the following things with the
        short-lived S3 URI:
        
         * Never write it to a log file.
         * Never share it with other programs or users.
         * Never store it in a database or other application.
         * Never store it in memory for long periods of time.
         * Never render it in a web page.
        
        If you need to store within your client a reference to an attached file,
        store long-lived `.../download` URI that returns a File Download Information
        object. Code your application so that when it needs to download the file,
        it uses that stored URI to fetch the File Download Information object and
        immediately uses the information in the FDI object to download the file.
      parameters:
        - name: acc
          in: path
          required: true
          schema:
            type: integer
          description: Account number
          example: 12345
        - name: pro
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: Process number
          example: 123
        - name: file
          in: path
          required: true
          schema:
            type: string
            format: alphanumeric
          description: File ID
          example: hk98765ToP87m6dcriq3hprR2O123456
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDownloadInfo"
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/processes/{acc}/{pro}/{file}/download"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/processes/{acc}/{pro}/{file}/download`);

      x-ignore-this: ignore this
  /v3/processes/{acc}/{pro}:
    get:
      summary: "Get a process"
      tags:
        - Process API
      description: |
        This operation returns the current
        state of the requested process.
      parameters:
        - name: acc
          in: path
          required: true
          schema:
            type: integer
          description: Account number
          example: 12345
        - name: pro
          in: path
          required: true
          schema:
            type: integer
            format: int32
          description: Process number
          example: 123
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessResp"
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/processes/{acc}/{pro}"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/processes/{acc}/{pro}`);

      x-ignore-this: ignore this
  /v3/templates/{acc}:
    get:
      summary: "Query templates"
      tags:
        - Process Template API
      description: |
        This operation returns a list of template summaries.
        Each summary includes information about the published
        revision (if present) and/or the draft revision (if present).

        However, the summaries do not contain the template
        details. To get the template details, you must get
        use `GET /v3/templates/{acc}/{tpl}/revs/{rev}` to retrieve
        the details of the specified revision.

        The optional query parameter `name` allows the requester
        to search for a template by name.
      parameters:
        - name: acc
          in: path
          required: true
          schema:
            type: integer
          description: Account number
          example: 12345
        - name: rev
          in: query
          required: true
          schema:
            type: string
            description: |
              When this value is `p`, the operation only returns summaries
              of templates that have published revisions, and the response
              will not include information about any draft revisions that may
              exist.
            enum:
              - p
        - name: name
          in: query
          required: false
          schema:
            type: string
            example: "Employee+Onboarding:+01-%2A-2020"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TempltSummaryResp"
              example:
                - template_no: 12345
                  name: My Template 1
                  updated_at: '1581139222356'
                  updated_by: 45678
                - template_no: 12538
                  name: My Template 2
                  updated_at: '1581139245678'
                  updated_by: 45422
                - template_no: 12540
                  name: Another Template
                  updated_at: '1581139247000'
                  updated_by: 45678
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/templates/{acc}?rev={rev}&name={name}"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/templates/{acc}?rev={rev}&name={name}`);

      x-ignore-this: ignore this
  /v3/templates/{acc}/{tpl}:
    get:
      summary: "Get a template"
      tags:
        - Process Template API
      description: |
        This operation gets information about the specified template,
        including basic metadata, access control information and summary
        info about the published and draft revisions of the template.

        This operation does NOT return the template content itself.
      parameters:
        - name: "acc"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Account number
          example: 12345
        - name: "tpl"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Template number
          example: 54321
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TempltResp"
              example:
                template_no: 54007
                template_owners:
                  - 12345
                template_viewers:
                  - 34512
                template_launchers:
                  - 34512
                published_rev:
                  status: PUBLISHED
                  updated_by: 12345
                  updated_at_time: 1592216999256
                  rev_no: 3
                  name: DO NOT DELETE - Unpublished Changes
                  spec_version: 3.2.0
                draft_rev:
                  status: DRAFT
                  updated_by: 1
                  updated_at_time: 1592217005521
                  rev_no: 4
                  name: DO NOT DELETE - Unpublished Changes
                  spec_version: 3.2.0
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/templates/{acc}/{tpl}"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/templates/{acc}/{tpl}`);

      x-ignore-this: ignore this
  /v3/templates/{acc}/{tpl}/revs/p:
    get:
      summary: "Get a template revision"
      tags:
        - Process Template API
      description: |
        This operation gets the specified template revision, including
        both revision metadata and the actual content of the template.

        `p` is the name of the published revision of the template.
      parameters:
        - name: "acc"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Account number
          example: 12345
        - name: "tpl"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Template number
          example: 54321
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TempltRevResp"
              example:
                template_no: 54007
                name: Basic Process Template Example
                status: PUBLISHED
                updated_by: 12345
                updated_at_time: 1592210999256
                rev_no: 3
                content:
                  name: Basic Process Example
                  instructions: Here are some process instructions.
                  tags: []
                  process_roles:
                    '2001':
                      name: Janice Radic
                      assigned_to_user: 12345
                      type: USER
                    '2002':
                      name: Director
                      assigned_to_users: []
                      type: JOB
                  process_owners:
                    - 12345
                  tasks:
                    - text: ''
                      is_optional: false
                      form:
                        fields:
                          - type: text
                            subtype: text
                            label: Your Hobby
                            name: hobby
                            required: false
                            value: Squid piano
                      role_no: 1001
                      task_type: twiq.numbered.list
                      task_no: 5001
                    - text: Step 1
                      is_optional: false
                      task_type: twiq.basic.task
                      parent_no: 5001
                      task_no: 5002
                      instructions: Lorem ipsum dolor sit amet.
                      role_no: 2002
                    - text: Step 2
                      is_optional: false
                      task_type: twiq.basic.task
                      parent_no: 5001
                      task_no: 5003
                      role_no: 2001
                spec_version: 3.2.0
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/templates/{acc}/{tpl}/revs/p"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/templates/{acc}/{tpl}/revs/p`);

      x-ignore-this: ignore this
  /v3/templates/{acc}/{tpl}/params:
    get:
      summary: "Get launch parameters for a template"
      tags:
        - Process Template API
      deprecated: true
      description: |
        This operation is deprecated. Use
        `GET /v3/templates/{acc}/{tpl}/revs/p/params`
        instead.
        
        This operation gets the launch parameters for the specified template.
      parameters:
        - name: "acc"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Account number
          example: 12345
        - name: "tpl"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Template number
          example: 54321
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormDefinition"
              example:
                fields:
                  - type: "text"
                    subtype: "text"
                    name: "business-name"
                    label: "Business Name"
                    required: true

                  - type: "date-time"
                    name: "meeting-date"
                    label: "Meeting Date"
                    required: true
                    include_time: true
                    display_in_viewer_tz: true

                  - type: "select"
                    name: "region"
                    label: "Region"
                    required: false
                    values:
                      - label: West
                        value: west
                      - label: Central
                        value: central
                      - label: East
                        value: east
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/templates/{acc}/{tpl}/params"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/templates/{acc}/{tpl}/params`);

      x-ignore-this: ignore this
  /v3/templates/{acc}/{tpl}/revs/p/params:
    get:
      summary: "Get launch parameters for a template revision"
      tags:
        - Process Template API
      description: |
        This operation gets the launch parameters for the published revision of the
        specified template.
  
        For the published revision of this template, get the Launch Form definition.
        The Launch Form definition specifies the fields whose values may be submitted
        when launching a new process from this template. These fields are known as
        Launch Parameters.

        Launch Parameters can only be fetched for the published revision of the template.
        An unpublished template does not allow the client to fetch Launch Parameters.

        ### 200 (Success) case

        When this operation returns Success (200), the returned FieldsResponse object
        has a `fields` property. This fields property specifies the Launch Form
        fields that the client may specify when using this template to launch a new
        process.

        The sample field data displayed in the 200 case is what you would see if the
        template's Launch Form specifies a text field named `business-name`,
        a date-time field named `meeting-date` and a select field named
        `region`. When you use your own process template, your custom forms will
        contain arbitrary sets of fields, and these will have whatever names
        you have specified in your template.
      parameters:
        - name: "acc"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Account number
          example: 12345
        - name: "tpl"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Template number
          example: 54321
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormDefinition"
              example:
                fields:
                  - type: "text"
                    subtype: "text"
                    name: "business-name"
                    label: "Business Name"
                    required: true

                  - type: "date-time"
                    name: "meeting-date"
                    label: "Meeting Date"
                    required: true
                    include_time: true
                    display_in_viewer_tz: true

                  - type: "select"
                    name: "region"
                    label: "Region"
                    required: false
                    values:
                      - label: West
                        value: west
                      - label: Central
                        value: central
                      - label: East
                        value: east
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
               "https://api.teamworkiq.com/api/v3/templates/{acc}/{tpl}/revs/p/params"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..." // See "Securing your API Keys"

            const requestHttp = (path) => {
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'GET',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.end();
            };

            requestHttp(`/api/v3/templates/{acc}/{tpl}/revs/p/params`);

      x-ignore-this: ignore this
  /v3/templates/{acc}/{tpl}/commands/launch:
    post:
      summary: "Launch a new process from a template"
      tags:
        - Process Template API
      deprecated: true
      description: |
        This operation is deprecated. Use
        `POST /v3/templates/{acc}/{tpl}/revs/p/commands/launch`
        instead.
        This operation launches a new process based on the published revision
        of the specified template.
      parameters:
        - name: "acc"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Account number
          example: 12345
        - name: "tpl"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Template number
          example: 54321
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LaunchCommand"
            example:
              launch_params:
                "business-name": "Acme Inc."
                "meeting-date": "1600496307258"
                "region":
                  - west
        required: true
      responses:
        201:
          description: Success
          headers:
            Location:
              schema:
                type: "string"
                format: "uri"
              description: "Contains the URI for the newly launched process"
          content: {}
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
              -X POST -i \
              -H "Content-Type: application/json" \
              -d '{"launch_params":{"business-name":"Acme Inc.","meeting-date":"1580610161378"}}' \
              "https://api.teamworkiq.com/api/v3/templates/{acc}/{tpl}/commands/launch"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..."; // See "Securing your API Keys"

            const requestHttp = (path, data) => {
                const body = JSON.stringify(data);
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'POST',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.write(body);
                req.end();
            };

            requestHttp(`/api/v3/templates/{acc}/{tpl}/commands/launch`, {
              launch_params: {
                "business-name":"Acme Inc.",
                "meeting-date":"1580610161378"
              }
            });

      x-ignore-this: ignore this
  /v3/templates/{acc}/{tpl}/revs/p/commands/launch:
    post:
      summary: "Launch a new process from a template revision"
      tags:
        - Process Template API
      description: |
        This operation launches a new process based on the published revision of
        the specified template.

        For the published revision of this template, get the Launch Form definition.
        If the template has a Launch Form, then the launch request must include a
        `launch_params` property that contains values for the template's Launch
        Parameters. The Launch Parameters are the fields of the template's Launch
        Form.

        A process can only be launched from the published revision of the template.
        An unpublished template does not allow the client to launch processes.

        The field data in the sample request body assumes that the Launch Form
        specifies a text field named `business-name`, a date-time field named
        `meeting-date` and a select field named `region`. When you use your
        own process template, your custom forms will contain arbitrary sets of fields,
        and these will have whatever names you have specified in your template.
      parameters:
        - name: "acc"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Account number
          example: 12345
        - name: "tpl"
          in: "path"
          required: true
          schema:
            type: "integer"
          description: Template number
          example: 54321
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LaunchCommand"
            example:
              launch_params:
                "business-name": "Acme Inc."
                "meeting-date": "1600496307258"
                "region":
                  - west
        required: true
      responses:
        201:
          description: Success
          headers:
            Location:
              schema:
                type: "string"
                format: "uri"
              description: "Contains the URI for the newly launched process"
          content: {}
        400:
          description: "Bad Request: Invalid request parameters."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 400
                code: 1400001
        401:
          description: "Unauthorized: Invalid or missing API key."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 401
                message: "A message string"
        403:
          description: "Forbidden: No access permissions."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 403
                code: 1400013
        404:
          description: "Not Found: The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
              example:
                status: 404
                message: "A message string"
        429:
          description: "Too Many Requests: Request throttled or Quota exceeded."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                status: 429
                code: 1429001
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithMsg"
      security:
        - api_key: []
      x-code-samples:
        - lang: cURL
          source: |
            curl -H "x-api-key: {api_key}" \
              -X POST -i \
              -H "Content-Type: application/json" \
              -d '{"launch_params":{"business-name":"Acme Inc.","meeting-date":"1580610161378"}}' \
              "https://api.teamworkiq.com/api/v3/templates/{acc}/{tpl}/revs/p/commands/launch"
        - lang: Node
          source: |
            let https = require('https');
            const api_key = "..."; // See "Securing your API Keys"

            const requestHttp = (path, data) => {
                const body = JSON.stringify(data);
                const options = {
                    hostname: 'api.teamworkiq.com',
                    port: 443,
                    path: path,
                    method: 'POST',
                    headers: {
                        'Content': 'application/json',
                        'x-api-key': api_key
                    },
                };

                const req = https.request(options, (res) => {
                    console.log(`Status code: ${res.statusCode}\n`);

                    res.on('data', (d) => {
                        console.log('Response:');
                        process.stdout.write(d);
                        console.log();
                    });
                });

                req.on('erorr', (e) => {
                    console.error(e);
                });

                req.write(body);
                req.end();
            };

            requestHttp(`/api/v3/templates/{acc}/{tpl}/revs/p/commands/launch`, {
              launch_params: {
                "business-name":"Acme Inc.",
                "meeting-date":"1580610161378"
              }
            });

      x-ignore-this: ignore this
components:
  schemas:
    LabeledValue:
      type: "object"
      required:
        - label
        - value
      properties:
        label:
          type: "string"
        value:
          oneOf:
            - type: "integer"
              format: "int32"
            - type: "string"
            - type: "object"
            - type: "boolean"
            - type: "array"
    Error:
      type: "object"
      required:
        - "code"
        - "status"
      properties:
        status:
          type: "integer"
          format: "int32"
          description: HTTP status code
          example: 403
        code:
          type: "integer"
          format: "int32"
          description: |
            Detailed error code. For more information about individual Error Codes,
            see [Troubleshooting](https://help.teamworkiq.com/en/collections/2138802).
          example: 1403201
    ErrorWithMsg:
      type: "object"
      required:
        - "status"
      properties:
        status:
          type: "integer"
          format: "int32"
          description: HTTP status code
          example: 403
        message:
          type: "string"
          description: Error message
    ArbitraryObject:
      type: "object"
      description: An arbitrary JSON object
      additionalProperties: { }
    DateSettings:
      oneOf:
        - $ref: "#/components/schemas/RelativeDateSettings"
        - $ref: "#/components/schemas/AbsoluteDateSettings"
    AbsoluteDateSettings:
      type: object
      required:
        - offset
      properties:
        offset:
          type: integer
          description: Msec since January 1, 1970 UTC.
    RelativeDateSettings:
      type: object
      properties:
        unit_type:
          type: string
          enum:
            - hour
            - day
            - week
            - month
          example: day
        num_units:
          type: integer
          description: |
            An integer (positive, negative or 0) that represents the number of units before or after the
            date and time specified in the variable. E.g. -2 means 2 units before the time specified in
            the variable. +3 means 3 units after that time. 0 means at that same time.
          example: 2
        var_name:
          type: string
          description: Name of a checklist variable or field.
          example: 'payment-deadline'

    LaunchCommand:
      description: |
        When the client launches a process from a template, the body of the
        launch request must be a LaunchCommand JSON object.
      required:
        - "launch_params"
      type: "object"
      properties:
        launch_params:
          $ref: "#/components/schemas/FieldValues"
    FormDefinition:
      description: |
        A FormDefinition specifies the fields that comprise a
        Task Form or a Launch Form.
      type: "object"
      required:
        - "fields"
      properties:
        fields:
          type: "array"
          items:
            $ref: "#/components/schemas/AbstractField"
    BuiltinFieldsResponse:
      description: |
        A BuiltinFieldsResponse provides definitions for all of the built-in fields.
        These fields are automatically pre-defined by TeamworkIQ and are available for
        use in all templates.
      type: "object"
      additionalProperties:
        $ref: "#/components/schemas/AbstractField"
    AbstractField:
      oneOf:
        - $ref: "#/components/schemas/AutoCompleteField"
        - $ref: "#/components/schemas/CheckboxGroupField"
        - $ref: "#/components/schemas/DateTimePickerField"
        - $ref: "#/components/schemas/FileField"
        - $ref: "#/components/schemas/HeaderField"
        - $ref: "#/components/schemas/HiddenField"
        - $ref: "#/components/schemas/NumberInputField"
        - $ref: "#/components/schemas/ParagraphField"
        - $ref: "#/components/schemas/RadioGroupField"
        - $ref: "#/components/schemas/SelectField"
        - $ref: "#/components/schemas/TextareaField"
        - $ref: "#/components/schemas/TextInputField"
    HeaderField:
      description: |
        A Header field defines a form field of type Header.
        Header fields add explanatory headers to a form. They do not allow the client to
        submit data to TeamworkIQ.
      type: "object"
      properties:
        type:
          type: "string"
          enum:
            - "header"
        subtype:
          description: |
            Header subtypes specify 4 header sizes.
            h1 is the largest, h4 the smallest.
          type: "string"
          enum:
            - h1
            - h2
            - h3
            - h4
        label:
          description: "The label specifies the header's content"
          type: "string"
    ParagraphField:
      description: |
        A Paragraph field defines a form field of type Paragraph.
        Paragraph fields add explanatory text to a form. They do not allow the client to
        submit data to TeamworkIQ.
      type: "object"
      required:
        - type
        - subtype
        - label
      properties:
        type:
          type: "string"
          enum:
            - "paragraph"
        subtype:
          description: |
            Paragraph subtypes specify paragraph format.
            Currently, there is only one supported subtype.
          type: "string"
          enum:
            - "paragraph"
        label:
          description: "The label specifies the content of the paragraph."
          type: "string"
    AbstractDataField:
      description: |
        An AbstractDataField represents any kind of field that allows the client
        to submit data to TeamworkIQ. A TextInputField or FileField is a data field;
        a ParagraphField or a HeaderField is not.
      type: "object"
      required:
        - type
        - name
        - label
      properties:
        type:
          description: "This property specifies the field type."
          type: "string"
        name:
          description: |
            This property specifies the field name for the form field. The field name is thee
            name that client programs use to uniquely identify the field within an instance
            of a process.

            When you launch a process, the request body will contain a `launch_params**
            object whose property names are the names of form fields and whose property
            values are the values of these fields.
          type: "string"
        description:
          description: |
            Specifies the optional **Help Text** for the
            form field. Intended for human users.
          type: "string"
        required:
          description: |
            If true, the field is required and MUST be non-null when the
            form is submitted. If false, the field is optional. Corresponds to
            the Required checkbox for the form field within the Author Tool.
          type: "boolean"
        label:
          description: |
            Specifies the field label that should be displayed above the field when
            the form is rendered. Intended for human users.
          type: "string"
        placeholder:
          description: |
            Specifies the placehoolder that should be displayed if the field does not
            have any value. Intended for human users.
          type: "string"
    TextInputField:
      description: |
        An ordinary text input field.

        For longer text blocks or those that require newlines, use
        a Textarea field instead.
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - subtype
            - label
          properties:
            type:
              type: "string"
              enum:
                - "text"
            subtype:
              description: |
                The subtype of text field. For example, this text field might be
                intended to hold an email address.
              type: "string"
              enum:
                - "text"
                - "email"
                - "link"
            maxlength:
              description: |
                The maximum permitted length of the field, in characters. Submitting aa longer
                value will cause the request to fail.
              type: "integer"
              format: "int32"
            value:
              description: |
                Default value.
                If present, it must be a string.
              type: "string"
    TextareaField:
      description: |
        A multi-line 'textarea' input field.

        If the assignee only needs to enter a few words, use the TextInputField
        instead.
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - label
            - subtype
          properties:
            type:
              type: "string"
              enum:
                - "textarea"
            subtype:
              description: |
                The subtype of text field.
                Right now there is only textarea.
              type: "string"
              enum:
                - "textarea"
            maxlength:
              description: |
                The maximum permitted length of the field, in characters. Submitting aa longer
                value will cause the request to fail.
              type: "integer"
              format: "int32"
            rows:
              description: |
                The number of rows to display in the form.
                This is a hint for the UI.
              type: "integer"
              format: "int32"
            value:
              description: |
                The default value for this field, which should be used if no other
                value has been selected. The default value must be a string, if it
                is specified at all.
              type: "string"
    SelectField:
      description: |
        This type of "value picker" field allows the assignee of the task to use a
        pulldown menu to pick values.

        The `values` property of this field specifies a list of label-value
        pairs. These are the items in the pulldown menu.

        The value of a Select field is ALWAYS an array of strings.

        Therefore, the `value` property (which specifies the default value of
        the field) is also an array of strings.
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - values
          properties:
            type:
              type: "string"
              enum:
                - "select"
            values:
              description: |
                An array of (`label`, `value`) pairs that is used to render a pulldown
                menu for the user of the form. The options are displayed in the order
                specified by the array. The `label` is displayed in the pulldown. Selecting
                an option in the pulldown adds the selected option's `value` to the array
                of values that the field will submit to TeamworkIQ.

                With a Select, only the values specified in the `values` list may be
                selected. There is no `other` property. This type of field does, however,
                optionally support the selection of multiple values, if the `multiple`
                property is true.

                #### Important!
                The `values` property is completely different from the `value` property.
                The `values` property specifies the list of selectable items. The `value`
                property specifies the option/s that are selected by default.
              type: "array"
              items:
                $ref: "#/components/schemas/LabeledValue"
            multiple:
              description: |
                Specifies whether the client is allowed to choose more than one values
                from the `values` pulldown.

                If `multiple` is true, then a client may submit an array that
                contains multiple values.
                If `multiple` is false, then when a client submits an array, it
                must contain AT MOST ONE value.

                Default is **false**.
              type: "boolean"
            value:
              description: |
                The default value for this field, which should be used if no other
                value has been selected. The default value must be an array of strings,
                if it is specified at all.
              type: "array"
              items:
                type: "string"
    CheckboxGroupField:
      description: |
        This type of "value picker" field allows the assignee of the task to use a
        checkbox group to pick values.

        The `values` property of this field specifies a list of label-value
        pairs. These are the items in the checkbox group.

        The value of a CheckboxGroup field is ALWAYS an array of strings.

        Therefore, the `value` property (which specifies the default value of
        the field) is also an array of strings.
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - values
          properties:
            type:
              type: "string"
              enum:
                - "checkbox-group"
            values:
              description: |
                An array of (`label`, `value`) pairs that is used to render a checkbox
                group for the user of the form. The options are displayed in the order
                specified by the array. The `label` is displayed in the UI. Checking
                the box next to an option adds the selected option's `value` to the array
                of values that the field will submit to TeamworkIQ.

                A CheckboxGroup always permits the selection of multiple values. If the
                `other` property is true, then the field also allows unlisted values to
                be submitted. See `other` below.

                #### Important!
                The `values` property is completely different from the `value` property.
                The `values` property specifies the list of selectable items. The `value`
                property specifies the option/s that are selected by default.
              type: "array"
              items:
                $ref: "#/components/schemas/LabeledValue"
            other:
              description: |
                Specifies whether the client is allowed to choose values that are
                not specified in the `values` list. In the Author Tool, this
                property corresponds to the "Let users enter an unlisted option" setting.

                If `other` is true, then a client may submit an array that
                contains a value that is not specified in the `values` pulldown.
                If `other` is false, then submitting such "other" values is forbidden.

                You might use `other` if your field specifies commonly seen values,
                but must be flexible enough to handle unusual values as well. For example,
                the pulldown might list the company's standard employee computer
                configurations; but in rare cases, a specialized configuration may be needed.

                A CheckboxGroup field always allows multiple selections.

                Default is **false**.
              type: "boolean"
            value:
              description: |
                The default value for this field, which should be used if no other
                value has been selected. The default value must be an array of strings,
                if it is specified at all.
              type: "array"
              items:
                type: "string"
    RadioGroupField:
      description: |
        This type of "value picker" field allows the assignee of the task to use a
        radio group to pick one value.

        The `values` property of this field specifies a list of label-value
        pairs. These are the items in the radio group.

        The value of a RadioGroup field is ALWAYS an array of strings.

        Therefore, the `value` property (which specifies the default value of
        the field) is also an array of strings.
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - label
            - values
          properties:
            type:
              type: "string"
              enum:
                - "radio-group"
            values:
              description: |
                An array of (`label`, `value`) pairs that is used to render a radio
                group for the user of the form. The radio options are displayed in the order
                specified by the array. The `label` is displayed in the UI. Checking
                the box next to an option adds the selected option's `value` to the array
                of values that the field will submit to TeamworkIQ.

                A CheckboxGroup only permits the selection of a single value. If the
                `other` property is true, then the field also allows unlisted values to
                be submitted. See `other` below.

                #### Important!
                The `values` property is completely different from the `value` property.
                The `values` property specifies the list of selectable items. The `value`
                property specifies the option that is selected by default.
              type: "array"
              items:
                $ref: "#/components/schemas/LabeledValue"
            other:
              description: |
                Specifies whether the client is allowed to choose values that are
                not specified in the `values` list. In the Author Tool, this
                property corresponds to the "Let users enter an unlisted option" setting.

                If `other` is true, then a client may submit an array that
                contains a value that is not specified in the `values` pulldown.
                If `other` is false, then submitting such "other" values is forbidden.

                You might use `other` if your field specifies commonly seen values,
                but must be flexible enough to handle unusual values as well. For example,
                the pulldown might list the company's standard employee computer
                configurations; but in rare cases, a specialized configuration may be needed.

                A RadioGroup field always allows multiple selections.

                Default is **false**.
              type: "boolean"
            value:
              description: |
                The default value for this field, which should be used if no other
                value has been selected. The default value must be an array of strings,
                if it is specified at all. The array size must NOT be greater than 1.
              type: "array"
              items:
                type: "string"
    AutoCompleteField:
      description: |
        This type of "value picker" field allows the assignee of the task to use an
        "autocomplete" text input to pick one value.

        The `values` property of this field specifies a list of label-value
        pairs. These are the items that are available for auto-completion.

        The value of an AutoComplete field is ALWAYS an array of strings.

        Therefore, the `value` property (which specifies the default value of
        the field) is also an array of strings.
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - label
            - values
          properties:
            type:
              type: "string"
              enum:
                - "autocomplete"
            values:
              description: |
                An array of (`label`, `value`) pairs that is used to render an autocomplete
                widget for the user of the form. The autocomplete options are displayed in the order
                specified by the array. The `label` is displayed in the UI. Selecting
                an option adds the selected option's `value` to the array
                of values that the field will submit to TeamworkIQ.

                An Autocomplete field only permits the selection of a single value. If the
                `other` property is true, then the field also allows unlisted values to
                be submitted. See `other` below.

                #### Important!
                The `values` property is completely different from the `value` property.
                The `values` property specifies the list of selectable items. The `value`
                property specifies the option that is selected by default.
              type: "array"
              items:
                $ref: "#/components/schemas/LabeledValue"
            other:
              description: |
                Specifies whether the client is allowed to enter values that are
                not specified in the `values` list. In the Author Tool, if the field's
                "Only accept a pre-defined Option" setting is checked, then `other`
                is false. If the setting is unchecked, then `other` is true.

                If `other` is true, then a client may submit an array that
                contains a value that is not specified in the `values` pulldown.
                If `other` is false, then submitting such "other" values is forbidden.

                You might use `other` if your field specifies commonly seen values,
                but must be flexible enough to handle unusual values as well. For example,
                the pulldown might list the company's standard employee computer
                configurations; but in rare cases, a specialized configuration may be needed.

                An Autocomplete field always allows only ONE selection. Multiple selections
                are forbidden.

                Default is **true**.
              type: "boolean"
            value:
              description: |
                The default value for this field, which should be used if no other
                value has been selected. The default value must be an array of strings,
                if it is specified at all. The array size must NOT be greater than 1.
              type: "array"
              items:
                type: "string"
    DateTimePickerField:
      description: |
        This type of field allows the assignee of the task to select a date-time.

        The value of a date-time field is a string containing the number of
        milliseconds since January 1, 1970, UTC time. Time values submitted to
        and returned by TeamworkIQ APIs are ALWAYS expressed as UTC dates.

        Therefore, the `value` property (which specifies the default value of
        the field) is also a string that contains such a number.
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - label
          properties:
            type:
              type: "string"
              enum:
                - "date-time"
            include_time:
              description: |
                If true, then TeamworkIQ forms include time as well as date when rendering
                or collecting values. If false, only date will be rendered or collected.
                The latter is useful if you need to collect birth dates or other calendar
                dates, without times.
                This property is intended as a hint for interfaces that allow human
                interaction with the system.
              type: "boolean"
            display_in_viewer_tz:
              description: |
                If true, then TeamworkIQ forms display the value of the field in the
                viewer's timezone. If false, then the value is rendered
                The latter is useful if the field needs to record a single consistent
                time value that everybody sees, regardless of their timezone.
                The value will be submitted and retrieved, as always, in UTC time,
                and the form will render it without converting it to the user's timezone.
                This property is intended as a hint for interfaces that allow human
                interaction with the system.
              type: "boolean"
            value:
              description: |
                Default value. If specified, then the value must be the number of msec
                since midnight on January 1, 1970, UTC, expressed as a string. For example,
                "1580510091163" is a valid value.
              type: "integer"
              format: "int64"
              example: "1580512652384"
    NumberInputField:
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - label
          properties:
            type:
              type: "string"
              enum:
                - "number"
            max:
              description: |
                Maximum permitted value for this field. If specified, must be a numerical
                string. Default is no maximum.
              type: "string"
            min:
              description: |
                Minimum permitted value for this field. If specified, must be a numerical
                string. Default is no minimum.
              type: "string"
            step:
              description: |
                If this property is specified, it specifies the "step" between permitted
                values. Some examples:

                 - If `step` is "1", then only whole numbers (... -2, -1, 0, 1, 2, ...) can be submitted as values.
                 - If `step` is "1000", then only 1000s (... -2000, -1000, 0, 1000, 2000, ...) can be submitted
                   as values.
                 - If `step` is "0.01", then only multiples of 0.01 (... -0.02, -0.01, 0.00, 0.01, 0.02, ...)
                   can be submitted as values. This might be useful if you need to specify dollars and cents.

                Must be a positive ( > 0 ) numerical string.

                Default is no step (i.e. no restriction).
              type: "string"
            value:
              description: |
                Default value.
                If present, it must be a string containing a number.
              pattern: "[0-9]{0,10}.?[0-9]{0,10}"
              type: "string"
    HiddenField:
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
          properties:
            type:
              type: "string"
              enum:
                - "hidden"
            value:
              description: |
                Default value.
                If present, it must be a string.
              type: "string"
    FileField:
      description: |
        Allows file upload and download.

        File fields are only supported when the process is already running. TeamworkIQ
        does not support File fields in template launch forms, which are submitted
        before the process starts.
      allOf:
        - $ref: "#/components/schemas/AbstractDataField"
        - type: "object"
          required:
            - type
            - name
            - label
          properties:
            type:
              description: |
                This property specifies the field type.

                File fields are **not** supported in template launch forms.
              type: "string"
              enum:
                - "file"
            multiple:
              description: |
                Specifies whether the field will store multiple files at the same time.

                If `multiple` is true, then a client may upload more than one file.
                If `multiple` is false, then a client must delete the field's
                existing file before another can be uploadad.

                Default is **true**.
              type: "boolean"
    FieldValues:
      description: |
        A JSON object whose property names are field names and whose property values
        are field values.
      type: object
      additionalProperties: { }
      example:
        'process-started-hour': 1590483600000
        'process-link': 'http://192.168.50.4:8082/#/processes/1/226661'
        'process-started': 1590485398968
        'some-guy': Howard
        'some-time': '1590483600000'
        'some-state': [ 'CA' ]
    FieldValuesWithBuiltinFields:
      description: |
        A JSON object whose property names are field names and whose property
        values are the corresponding field values. Unlike FieldValues, this
        object also includes all read-only "built-in" field names, such as
        `process-started`, which are automatically included when process data
        is retrieved).
      allOf:
        - $ref: "#/components/schemas/FieldValues"
        - type: object
          required:
            - 'process-link'
            - 'process-started'
            - 'process-started-hour'
          properties:
            'process-link':
              type: string
              format: uri
              example: 'https://app.teamworkiq.com/#/processes/12345/123'
            'process-started':
              type: integer
              format: int64
              description: "Timestamp in msec since the epoch, UTC."
              example: 1590483600000
            'process-started-hour':
              type: integer
              format: int64
              description: "Timestamp, rounded down to the preceding hour, in msec since the epoch, UTC."
              example: 1590483600000
    FileTypeInfo:
      description: "Information about a supported file type"
      type: "object"
      required:
        - "file_ext"
        - "mime_type"
        - label
      properties:
        file_ext:
          description: "File name extension, e.g. `png` or `pdf`"
          type: "string"
        mime_type:
          description: "MIME type, e.g. `image/png` or `application/pdf`"
          type: "string"

    AccountRole:
      description: |
        An AccountRole identifies a role that a user plays within an account.
        Account roles can ONLY be assigned to individual users. Account roles
        can NEVER be assigned to groups.

        See [TeamworkIQ API: Users and Account Roles](https://help.teamworkiq.com/en/articles/4152206).
      type: string
      enum:
        - member
        - template_creator
        - admin
        - owner
        - robot
    UserStatus:
      description: |
        The status of a user.

          - A `REGISTERED` user has been invited to join TeamworkIQ,
            but has not yet accepted the invitation. The invitation MAY
            have expired.

          - An `ACTIVE` user has joined TeamworkIQ, but it is possible
            that the user has not yet accepted an invitation to become
            a member of your account.

          - A `DEACTIVATED` user has been deactivated.

          - A `LOCKED` user has been locked by TeamworkIQ Operations team.

        See [TeamworkIQ API: User Statuses](https://help.teamworkiq.com/en/articles/4152955)
      type: string
      enum:
        - REGISTERED
        - ACTIVE
        - LOCKED
        - DEACTIVATED
    GroupStatus:
      description: |
        The status of a group:

          - An `ACTIVE` group is in use.

          - A `DEACTIVATED` group has been deactivated.

      type: string
      enum:
        - ACTIVE
        - DEACTIVATED
    UserSummaries:
      description: "Provides summary information about a list of users"
      type: array
      items:
        $ref: "#/components/schemas/UserSummary"
      example:
        - user_no: 54321
          email: jradic@stewartjauss.com
          name: Janice Radic
          given_name: Janice
          surname: Radic
          status: ACTIVE
          account_roles:
            - member
            - template_creator
            - admin
            - owner
        - user_no: 54324
          email: abranson@stewartjauss.com
          name: Ann Branson
          given_name: Ann
          surname: Branson
          status: ACTIVE
          account_roles:
            - member
            - template_creator
        - user_no: 54345
          email: bmack@stewartjauss.com
          name: Bruno Mack
          given_name: Bruno
          surname: Mack
          status: ACTIVE
          account_roles:
            - member
        - user_no: 54552
          email: no-reply@teamworkiq.com
          name: Robot
          surname: Robot
          status: ACTIVE
          account_roles:
            - robot
        - user_no: 54398
          email: frank@stewartjauss.com
          name: Frank Gonzales
          given_name: Frank
          surname: Gonzales
          status: ACTIVE
          account_roles:
            - member
    UserSummary:
      description: "Provides summary information about a user"
      type: "object"
      required:
        - account_roles
        - name
        - status
        - user_no
      properties:
        user_no:
          description: "A unique TeamworkIQ user number"
          type: integer
          format: int64
        name:
          description: "Full name of this user"
          type: string
          format: name
        email:
          description: |
            Email address of this user, unless the user is the robot "user"
            that is associated with an app
          type: string
          format: email
        given_name:
          description: |
            Given name (personal name or "first name") of this user,
            unless the user is the robot "user" that is associated with an app
          type: string
          format: name
        surname:
          description: |
            Surname (family name or "last name") of this user,
            unless the user is the robot "user" that is associated with an app
          type: string
          format: name
        status:
          $ref: "#/components/schemas/UserStatus"
        account_roles:
          type: array
          items:
            $ref: "#/components/schemas/AccountRole"
    GroupSummaries:
      description: "Provides summary information about a list of groups"
      type: array
      items:
        $ref: "#/components/schemas/GroupSummary"
      example:
        - group_no: 54339
          name: _members
          status: ACTIVE
        - group_no: 54340
          name: _admins
          status: ACTIVE
        - group_no: 54341
          name: _template_creators
          status: ACTIVE
    GroupSummary:
      description: |
        Provides summary information about a user
        group that belongs to an account
      type: "object"
      required:
        - group_no
        - name
        - status
      properties:
        group_no:
          description: "A unique TeamworkIQ group number"
          type: integer
          format: int64
        name:
          description: "The name of this group"
          type: string
          format: name
        status:
          $ref: "#/components/schemas/GroupStatus"
    AccountLimits:
      description: "Limits (such as quotas and metadata) for an account."
      type: "object"
      required:
        - root_domain
        - file_types
        - max_file_size
        - max_files
        - api_scope_namespace
      properties:
        max_file_size:
          description: "Maximum file size for file uploads."
          type: "integer"
        max_files:
          description: "Maximum number of files that a single File field can store"
          type: "integer"
        file_types:
          description: "An array of file types that may be uploaded in File Upload fields"
          type: "array"
          items:
            $ref: "#/components/schemas/FileTypeInfo"
        root_domain:
          description: "Reserved for future use."
          type: "string"
        api_scope_namespace:
          description: "Reserved for future use."
          type: "string"
      example:
        max_file_size: 50000
        max_files: 50
        file_types:
          - file_ext: ".pdf"
            mime_type: "application/pdf"
          - file_ext: ".png"
            mime_type: "image/png"
        root_domain: ".teamworkiq.com"
        api_scope_namespace: "https://api.teamworkiq.com/v3/"

    ProcessJobRoleReq:
      type: object
      description: |
        Process Roles are described in
        [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
        and
        [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).

        This is a definition of a `Job Role`. This representation is used when
        the client sends a request to TeamworkIQ.
      required:
        - type
        - name
        - assigned_to_users
      properties:
        type:
          type: string
          enum:
            - JOB
          description: Type of role
          example: JOB
        name:
          type: string
          format: name
          description: |
            This is the name of the role.

            The author can explicitly specify the name of a Job role
            when creating or updating the process definition.
          example: Employee
        assigned_to_users:
          type: array
          items:
            type: integer
            format: int64
          description: |
            Array of user numbers, identifying the users who are
            to be assigned this role.

            The array may be empty, in which case no users are
            assigned this role. It may contain one user number,
            or multiple user numbers.
          example: [ 12345 ]
    ProcessUserRoleReq:
      type: object
      description: |
        Process Roles are described in
        [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
        and
        [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).

        This is a definition of a `User Role`. This representation is used when
        the client sends a request to TeamworkIQ.

        A User role always represents a specific user.
      required:
        - type
        - assigned_to_user
      properties:
        type:
          type: string
          enum:
            - USER
          description: Type of role
          example: USER
        assigned_to_user:
          type: integer
          format: int64
          description: |
            User number, identifying the
            user who is assigned this role
          example: 12345
    ProcessProcRoleReq:
      oneOf:
        - $ref: "#/components/schemas/ProcessJobRoleReq"
        - $ref: "#/components/schemas/ProcessUserRoleReq"
    ProcessJobRoleResp:
      type: object
      description: |
        Process Roles are described in
        [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
        and
        [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).

        This is a definition of a `Job Role`. This representation is used when
        the client receives a response from TeamworkIQ.
      required:
        - type
        - name
        - assigned_to_users
        - assigned_to_users_actual
      properties:
        type:
          type: string
          enum:
            - JOB
          description: Type of role
          example: JOB
        name:
          type: string
          format: name
          description: |
            This is the name of the role.

            The author can explicitly specify the name of a Job role
            when creating or updating the process definition.
          example: Employee
        assigned_to_users:
          type: array
          items:
            type: integer
            format: int64
          description: |
            Array of user numbers, identifying the users who are
            assigned this role.
          example: [ 12345 ]
        assigned_to_users_actual:
          type: array
          items:
            type: integer
            format: int64
          description: |
            Array of user numbers, identifying the users who are
            actually assigned this role.

            This property is read-only. It should automatically
            contain the same values as assigned_to_users.
          example: [ 12345 ]
        accepted_by:
          type: integer
          format: int64
          description: |
            User number, identifying the user
            who accepted this role. Optional.
          example: 12345
    ProcessUserRoleResp:
      type: object
      description: |
        Process Roles are described in
        [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
        and
        [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).

        This is a definition of a `User Role`. This representation is used when
        the client receives a response from TeamworkIQ.
      required:
        - type
        - name
        - assigned_to_user
        - assigned_to_user_actual
      properties:
        type:
          type: string
          enum:
            - USER
          description: Type of role
          example: USER
        name:
          type: string
          format: name
          description: |
            This is the full name of the user who is assigned this role.
            The name of the role is automatically the name of the user.
          example: Employee
        assigned_to_user:
          type: integer
          format: int64
          description: |
            User number, identifying the user who
            is assigned this role
          example: 12345
        assigned_to_user_actual:
          type: integer
          format: int64
          description: |
            User number, identifying the user who is actually assigned
            this role. This is the same as assigned_to_user.
          example: 12345
        accepted_by:
          type: integer
          format: int64
          description: |
            User number, identifying the user
            who accepted this role. Optional.
          example: 12345
    ProcessProcRoleResp:
      oneOf:
        - $ref: "#/components/schemas/ProcessJobRoleResp"
        - $ref: "#/components/schemas/ProcessUserRoleResp"

    TempltJobRoleReq:
      type: object
      description: |
        Process Roles are described in
        [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
        and
        [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).

        This is a definition of a `Job Role`. This representation is used when
        the client sends a create/update template request to TeamworkIQ.
      required:
        - type
        - name
        - assigned_to_users
      properties:
        type:
          type: string
          enum:
            - JOB
          description: Type of role
          example: JOB
        name:
          type: string
          format: name
          description: |
            This is the name of the role.

            The author can explicitly specify the name of a Job role
            when creating or updating the process definition.
          example: Employee
        assigned_to_users:
          type: array
          items:
            type: integer
            format: int64
          description: |
            Array of user numbers, identifying the users who are
            actually assigned this role.

            This property automatically contains the same values
            as assigned_to_users.
          example: [ 12345 ]
    TempltUserRoleReq:
      type: object
      description: |
        Process Roles are described in
        [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
        and
        [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).

        This is a definition of a `User Role`. This representation is used when
        the client sends a create/update template request to TeamworkIQ.

        A User role always represents a specific user.
      required:
        - type
        - assigned_to_user
      properties:
        type:
          type: string
          enum:
            - USER
          description: Type of role
          example: USER
        assigned_to_user:
          type: integer
          format: int64
          description: |
            User number, identifying the
            user who is assigned this role
          example: 12345
    TempltProcRoleReq:
      oneOf:
        - $ref: "#/components/schemas/TempltJobRoleReq"
        - $ref: "#/components/schemas/TempltUserRoleReq"
    TempltJobRoleResp:
      type: object
      description: |
        Process Roles are described in
        [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
        and
        [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).

        This is a definition of a `Job Role`. This representation is used when
        the client receives a get-template response from TeamworkIQ.
      required:
        - type
        - name
        - assigned_to_users
      properties:
        type:
          type: string
          enum:
            - JOB
          description: Type of role
          example: JOB
        name:
          type: string
          format: name
          description: |
            This is the name of the role.

            The author can explicitly specify the name of a Job role
            when creating or updating the process definition.
          example: Employee
        assigned_to_users:
          type: array
          items:
            type: integer
            format: int64
          description: |
            Array of user numbers, identifying the users who are
            actually assigned this role.

            This property automatically contains the same values
            as assigned_to_users.
          example: [ 12345 ]
    TempltUserRoleResp:
      type: object
      description: |
        Process Roles are described in
        [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
        and
        [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).

        This is a definition of a `User Role`. This representation is used when
        the client receives a get-template response from TeamworkIQ.

        A User role represents a specific user.
      required:
        - type
        - name
        - assigned_to_user
      properties:
        type:
          type: string
          enum:
            - USER
          description: Type of role
          example: USER
        name:
          type: string
          format: name
          description: |
            This is the full name of the user who is assigned this role.
            The name of the role is automatically the name of the user.
          example: Employee
        assigned_to_user:
          type: integer
          format: int64
          description: |
            User number, identifying the user who
            is assigned this role
          example: 12345
    TempltProcRoleResp:
      oneOf:
        - $ref: "#/components/schemas/TempltJobRoleResp"
        - $ref: "#/components/schemas/TempltUserRoleResp"

    TaskType:
      description: A task type
      type: string
      enum:
        - twiq.basic.task
        - twiq.numbered.list
        - twiq.bullet.list
    TaskStatus:
      description: |
        The status of a task:

          - A `WAITING` task has not been started.

          - An `IN_PROGRESS` task has been started and is being worked on.

          - A `DONE` task has been completed or skipped.

          - A `DISABLED` task is a subtask of a SKIPPED task.
      type: string
      enum:
        - WAITING
        - IN_PROGRESS
        - DONE
        - DISABLED
    TaskResult:
      description: |
        The result of a task. This value is only present if the task
        status is DONE. If the task status has any other value, then
        `result` must be null.

          - A `COMPLETED` task has been successfully completed.

          - A `SKIPPED` task has been skipped.

      type: string
      enum:
        - COMPLETED
        - SKIPPED
    TaskFlag:
      description: A task flag
      type: string
      enum:
        - TASK_REOPENED
    ProcessStatus:
      description: |
        The status of a process:

          - A `DRAFT` process has not yet been started.

          - A `IN_PROGRESS` process has been started and is running.

          - A `PAUSED` process has been paused. It may be edited.

          - A `DONE` process is completed or stopped.

      type: string
      enum:
        - DRAFT
        - IN_PROGRESS
        - PAUSED
        - DONE
    ProcessResult:
      description: |
        The result of a process. This value is only present if the process
        status is DONE. If the process status has any other value, then the
        process MUST NOT have a result:

          - A `COMPLETED` process has been successfully completed.

          - A `STOPPED` process was stopped without being completed.

      type: string
      enum:
        - COMPLETED
        - STOPPED
    ProcessFlag:
      description: A process flag
      type: string
      enum:
        - ATTENTION
        - CHK_REOPENED

    TempltRevStatus:
      type: string
      enum:
        - PUBLISHED
        - DRAFT
      description: |
        The status of the template revision.

        A DRAFT revision is visible only to the owners of the template
        and cannot be launched. It can be edited by owners of the template.
        There can only be one DRAFT revision, and it must always be the latest
        revision of the template.

        A PUBLISHED revision is visible and discoverable by all owners
        and viewers of the template. It is launchable by owners and
        launchers of the template. It can never be edited.

        Publishing a DRAFT revision hides any previously published revision
      example: DRAFT

    ProcessTaskResp:
      description: |
        Representation of a process task that
        is returned to the client by TeamworkIQ.
      type: object
      required:
        - task_no
        - role_no_actual
        - task_type
        - text
        - status
        - is_ready
      properties:
        task_no:
          type: integer
          minimum: 5001
          maximum: 8000
          description: task number
          example: 5004
        parent_no:
          type: integer
          minimum: 5001
          maximum: 8000
          description: task number of the task's parent
          example: 5002
        role_no:
          type: integer
          minimum: 1001
          maximum: 7000
          description: |
            Number of the role that is required to complete the task.

            The root task (5001) must have role_no 1001 (process owner
            role).

            By default, a task's role_no is null.

            See also role_no_actual.
          example: 2001
        role_no_actual:
          type: integer
          minimum: 1001
          maximum: 7000
          description: |
            Actual role number of the task.

            RootTask.role_number_actual = 1001 (Process Owner).
            If role_no != null, then role_number_actual = role_no.
            If role_no == null, then role_number_actual = parent.role_no_actual.

            In other words, when a task's role number is non-null,
            the "actual role number" is the role number. Otherwise,
            the "actual role number" is inherited from the task's parent.
          example: 2001
        text:
          type: string
          format: markup_with_vars
          description: |
            Task text. May contain markup and `{..}` variable expressions.
            Default text for a task is the empty string "".
          example: 'Lorem ipsum <b>dolor</b> {foo}'
        instructions:
          type: string
          format: markup
          description: Task instructions. May contain markup.
          example: 'Lorem ipsum <b>dolor</b>.'
        task_type:
          $ref: '#/components/schemas/TaskType'
        task_flags:
          type: array
          items:
            $ref: '#/components/schemas/TaskFlag'
        status:
          $ref: '#/components/schemas/TaskStatus'
        result:
          $ref: '#/components/schemas/TaskResult'
        is_ready:
          type: boolean
          description: If true, this task is ready to be worked upon
        is_optional:
          type: boolean
          description: If true, this task may be skipped
        has_note:
          type: boolean
          description: If true, this task has a note
        has_draft_data:
          type: boolean
          description: If true, this task has draft data
        started_at_time:
          type: integer
          format: int64
          description: |
            Time when task was first started
            Msec since the epoch, UTC.
          example: 1590757323621
        actionable_at_time:
          type: integer
          format: int64
          description: |
            Time when task last became actionable.
            Number of msec since the epoch, UTC.
          example: 1590757323621
        started_by:
          type: integer
          format: int64
          description: TeamworkIQ user number of the user who first stared the task
          example: 1590757323621
        done_by:
          type: integer
          format: int64
          description: TeamworkIQ user number of the user who most recently completed or skipped the task
          example: 1590757323621
        due_at:
          $ref: '#/components/schemas/DateSettings'
        due_at_time:
          type: integer
          format: int64
          description: |
            Absolute time when task will become due
            Number of msec since the epoch, UTC.
          example: 1590757323621
        form:
          $ref: '#/components/schemas/FormDefinition'
    ProcessTaskReq:
      description: |
        Representation of a process task
        is sent by the client to TeamworkIQ.
      type: object
      required:
        - task_no
        - task_type
        - text
      properties:
        task_no:
          type: integer
          minimum: 5001
          maximum: 8000
          description: task number
          example: 5004
        parent_no:
          type: integer
          minimum: 5001
          maximum: 8000
          description: task number of the task's parent
          example: 5002
        role_no:
          type: integer
          minimum: 1001
          maximum: 7000
          description: |
            Number of the role that is required to complete the task.

            The root task (5001) must have role_no 1001 (process owner
            role).

            By default, a task's role_no is null.

            See also role_no_actual.
          example: 2001
        role_no_actual:
          type: integer
          minimum: 1001
          maximum: 7000
          description: |
            Actual role number

            If role_no is non-null, then role_number_actual is role_no.
            If role_no is null, then role_number_actual is the same
            as the role_no_actual of the task's parent.
          example: 2001
        text:
          type: string
          format: markup_with_vars
          description: |
            Task text. May contain markup and `{..}` variable expressions.
            Default text for a task is the empty string "".
          example: 'Lorem ipsum <b>dolor</b> {foo}'
        instructions:
          type: string
          format: markup
          description: Task instructions. May contain markup.
          example: 'Lorem ipsum <b>dolor</b>.'
        task_type:
          $ref: '#/components/schemas/TaskType'
        is_optional:
          type: boolean
          description: If true, this task may be skipped
        due_at:
          $ref: '#/components/schemas/DateSettings'
        form:
          $ref: '#/components/schemas/FormDefinition'
    ProcessReq:
      description: |
        Representation of a process that
        is sent by the client to TeamworkIQ.
      type: object
      required:
        - process_no
        - name
      properties:
        process_no:
          type: integer
          format: int32
          description: |
            Process number. This number
            is unique within the account.
          example: 123
        name:
          type: string
          format: name
          description: "The title of the process"
          example: 'Employee Onboarding for Dan Wheeler'
        instructions:
          type: string
          format: markup
          description: "The instructions for the process"
          example: 'Lorem <b>ipsum</b> dolor sit amet.'
        status:
          $ref: "#/components/schemas/ProcessStatus"
        result:
          $ref: "#/components/schemas/ProcessResult"
        tags:
          type: array
          items:
            type: string
            format: name
            description: "A tag that has been applied to the process"
        process_roles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ProcessProcRoleReq'
          description: |
            A JSON object whose property names are role numbers
            and whose property values are ProcessRoleRead objects

            Process Roles are described in
            [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
            and
            [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).
          example:
            '2001':
              type: JOB
              name: Employee
              assigned_to_users: [ 12345, 23456 ]
            '2004':
              type: USER
              assigned_to_user: 12345
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/ProcessTaskReq"
    ProcessResp:
      description: |
        Representation of a process that
        is returned by TeamworkIQ to the client
      type: object
      required:
        - process_no
        - name
        - created_by
        - created_at_time
        - updated_by
        - updated_at_time
        - status
        - process_owners
        - process_roles
        - tags
        - tasks
      properties:
        process_no:
          type: integer
          format: int32
          description: |
            Process number. This number is
            unique within the account.
          example: 123
        template_no:
          type: integer
          format: int32
          description: |
            Template number. This number is unique within the account.
            This value identifies the template from which this process
            was launched.

            If a process has no template_no property, then the process
            was not launched from a template.
          example: 1234
        name:
          type: string
          format: name
          description: "The title of the process"
          example: 'Employee Onboarding for Dan Wheeler'
        instructions:
          type: string
          format: markup
          description: "The instructions for the process"
          example: 'Lorem <b>ipsum</b> dolor sit amet.'
        status:
          $ref: "#/components/schemas/ProcessStatus"
        result:
          $ref: "#/components/schemas/ProcessResult"
        created_at_time:
          type: integer
          format: int64
          description: |
            Creation time for the process.
            Number of msec since midnight Jan 1, 1970 UTC
          example: 1581001439775
        created_by:
          type: integer
          format: int64
          description: "TeamworkIQ User number of the creator of the process"
          example: 45678
        updated_at_time:
          type: integer
          format: int64
          description: |
            Last-updated time for the process.
            Number of msec since midnight Jan 1, 1970 UTC
          example: 1581001439775
        updated_by:
          type: integer
          format: int64
          description: "TeamworkIQ User number"
          example: 45678
        started_at_time:
          type: integer
          format: int64
          description: |
            Time when the process started.
            Number of msec since midnight Jan 1, 1970 UTC
          example: 1581001439775
        done_at_time:
          type: integer
          format: int64
          description: |
            Time when the process completed.
            Number of msec since midnight Jan 1, 1970 UTC
          example: 1581001439775
        done_tasks:
          type: integer
          format: int32
          description: |
            Number of tasks in the process that are
            DONE (completed or skipped)
          example: 8
        remaining_tasks:
          type: integer
          format: int32
          description: Number of tasks in the process that are WAITING or IN_PROGRESS
          example: 8
        pct_done:
          type: integer
          minimum: 0
          maximum: 100
          description: |
            pct_done means "percent done". It tells you how complete the process is.
            This is an integer percentage value between 0 and 100.

            0 means that none of the tasks are done. 100 means that all of the tasks are done.
            A number between 0 and 100 means that some of the tasks are done. For example, 27
            means that 27% of the tasks are done.

            How different tasks are treated:

              - List tasks are ignored (only manual tasks count).

              - Disabled tasks are ignored (only enabed tasks count).

              - Done tasks (completed or skipped) are counted as done.

              - All other tasks are counted as not done.

          example: 25
        tags:
          type: array
          items:
            type: string
            format: name
            example: "months/2020/May"
        process_flags:
          type: array
          items:
            $ref: "#/components/schemas/ProcessFlag"
          description: An array of process flags
          example: [ 'ATTENTION' ]
        process_roles:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ProcessProcRoleResp"
          description: |
            A JSON object whose property names are role numbers
            and whose property values are ProcessRoleRead objects

            Process Roles are described in
            [Process Roles](https://help.teamworkiq.com/en/articles/4153079)
            and
            [TeamworkIQ API: Process Roles](https://help.teamworkiq.com/en/articles/4154133).
          example:
            '2001':
              type: JOB
              name: Employee
              assigned_to_users: [ 12345, 23456 ]
              assigned_to_users_actual: [ 12345, 23456 ]
        process_owners:
          type: array
          items:
            type: integer
            format: int64
            description: "The user number of one of the process owners"
            example: 12345
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/ProcessTaskResp"

    TempltSummaryResp:
      description: A summary of a published template
      type: "object"
      required:
        - template_no
        - name
        - updated_at
        - updated_by
      properties:
        template_no:
          type: integer
          format: int32
          description: The template number for the template
          example: 12345
        name:
          type: string
          description: The name (title) of the published revision of the template
          example: My Sample Template
        updated_at:
          type: string
          description: "String containing the number of msec since midnight Jan 1, 1970 UTC"
          example: '1581001439775'
          deprecated: true
        updated_at_time:
          type: string
          description: "Number of msec since midnight Jan 1, 1970 UTC"
          example: '1581001439775'
        updated_by:
          type: integer
          format: int64
          description: TeamworkIQ User ID
          example: 45678
      example:
        template_no: 12345
        name: My Onboarding Template
        updated_at_time: 1581001439775
        updated_by: 45678
    TempltResp:
      description: |
        Representation of a template that can be retrieved
        from the server. Contains template metadata and summaries
        for the draft and/or published revisions. Does not contain
        the actual template content.

        Every template has a published revision and/or a draft revision.

        The name of the template is the name of the latest revision.
        If there is a draft revision, that rev will always be latest.
        If there is no draft revision, then the published rev will
        always be latest.
      type: object
      required:
        - template_no
        - created_at_time
        - created_by
        - updated_at_time
        - updated_by
        - template_owners
        - template_viewers
        - template_launchers
        - published_rev
        - draft_rev
      properties:
        template_no:
          type: integer
          format: int32
          description: |
            Template number. This number is unique within the account.
            This value identifies the template.
          example: 1234
        created_at_time:
          type: integer
          format: int64
          description: |
            Creation time for the template.
            Number of msec since midnight Jan 1, 1970 UTC
          example: 1581001439775
        created_by:
          type: integer
          format: int64
          description: TeamworkIQ User number of the creator of the template.
          example: 45678
        template_owners:
          type: array
          items:
            type: integer
            format: int64
            example: 54321
          description: TeamworkIQ user numbers of the owners of this template
        template_viewers:
          type: array
          items:
            type: integer
            format: int64
            example: 54321
          description: TeamworkIQ user numbers of the users who can view and discover this template
        template_launchers:
          type: array
          items:
            type: integer
            format: int64
            example: 54321
          description: TeamworkIQ user numbers of the users who can launch this template
        published_rev:
          $ref: "#/components/schemas/TempltRevSummaryResp"
        draft_rev:
          $ref: "#/components/schemas/TempltRevSummaryResp"
    TempltRevSummaryResp:
      description: |
        A summary of a template revision that is
        returned to the client by TeamworkIQ.
      type: object
      required:
        - rev_no
        - name
        - status
        - updated_at_time
        - updated_by
      properties:
        rev_no:
          type: integer
          format: int32
          description: The revision number for the template
          example: 1
        name:
          type: string
          description: |
            The template name (title)
            specified in the revision
          example: My Sample Template
        updated_at_time:
          type: integer
          format: int64
          description: "Number of msec since midnight Jan 1, 1970 UTC"
          example: 1581001439775
        updated_by:
          type: integer
          format: int64
          deprecated: true
          description: TeamworkIQ User number
          example: 54321
      example:
        template_no: 12345
        name: My Onboarding Template
        updated_at_time: 1581001439775
        updated_by: 45678
    TempltRevResp:
      description:
        A detailed template revision returned
        to the client by TeamworkIQ.
      type: object
      required:
        - template_no
        - content
        - name
        - rev_no
        - status
        - updated_at_time
        - updated_by
      properties:
        template_no:
          type: integer
          format: int32
          description: "The template's unique template number"
          example: 12345
        content:
          $ref: "#/components/schemas/TempltRevProcessResp"
        name:
          type: string
          description: "The template name (title) specified in the revision"
          example: My Sample Template
        rev_no:
          type: integer
          format: int32
          description: The revision number for the template
          example: 1
        status:
          $ref: "#/components/schemas/TempltRevStatus"
        updated_at_time:
          type: integer
          format: int64
          description: "Number of msec since midnight Jan 1, 1970 UTC"
          example: 1581001439775
        updated_by:
          type: integer
          format: int64
          description: TeamworkIQ User number of the user who last updated this revision
          example: 54321
    TempltRevProcessResp:
      description: |
        This object is a template for
        launching new process instances.
      type: object
      required:
        - name
        - process_owners
        - process_roles
        - tags
        - tasks
      properties:
        assign_role_to_launcher:
          type: integer
          minimum: 1001
          maximum: 3000
          description: |
            If present, this value must be one of the following:

             - 1001: This specifies that the launcher of the process
               must automatically become a Process Owner. If you
               choose this option, API programs cannot launch processes
               from this template. See
               [more info](https://help.teamworkiq.com/en/articles/4113956-who-owns-a-newly-launched-process).

             - A custom Process Role number specified in
               the `process_roles` property.

            See also
            [Who owns a newly launched process?](https://help.teamworkiq.com/en/articles/4113956)
          example: 2001
        instructions:
          type: string
          format: markup
          description: |
            This string specifies the instructions for the new process.
            It may contain markup.

            This value cannot contain process variables.
          example: "My Sample Template: {customer-name}"
        name:
          type: string
          format: name_with_vars
          description: |
            This string is a template for a process name.

            This string may contain variable expressions like
            `{process-started-at:yyyy}` that refer to built-in variables
            or to the template's launch params. When the template is launched,
            these variables will be automatically evaluated and the process name
            will be generated based on the name template.
          example: "My Sample Template: {customer-name}"
        process_owners:
          type: array
          items:
            type: integer
            format: int64
            description: A TeamworkIQ user number
            example: 54321
          description: |
            When a process is launched from this template, each user specified
            in this array automatically becomes a Process Owner of the new process.

            See also
            [Who owns a newly launched process?](https://help.teamworkiq.com/en/articles/4113956)
          example: [ 54321, 54353 ]
        process_roles:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/TempltProcRoleResp"
          description: |
            The process_roles object defines a set of custom "process roles" that are used in the
            template.

            The role number of each process role MUST be greater than or equal to 2001,
            and less than or equal to 3000. Lower numbers are reserved for use by "built-in"
            roles, and higher numbers are reserved for future use.

            All role numbers used in a TeamworkIQ template MUST be defined in process_roles,
            except for the built-in Process Owners role (1001), which MUST NOT be specified in
            process_roles.
          example:
            '2001':
              type: JOB
              name: Employee
              assigned_to_users: [ 54321, 54353 ]
              comment: This is a "Job role" that is assigned by the template.
            '2004':
              type: JOB
              name: Supervisor
              assigned_to_users: [ ]
              comment: This is a "Job role" whose assignees are not specified by the template.
            '2005':
              type: USER
              name: Janice Radic
              assigned_to_user: 54321
              comment: This is a "User role".
        tags:
          type: array
          items:
            type: string
            format: name_with_vars
            description: |
              This string is a template for a process tag.

              This string may contain variable expressions like
              `{process-started-at:yyyy}` that refer to built-in variables
              or to the template's launch params. When the template is launched,
              these variables will be automatically evaluated and the process tag
              will be generated based on the name template.
            example: months/{process-started-at:yyyy}/{process-started-at:mm}
          description: An array of tag templates. New processes will be tagged when they are launched.
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TempltRevTaskResp"
    TempltRevTaskResp:
      description: |
        This object is a task that appears within a template revision's content object
        when a template revision is retrieved from the server.
      type: object
      required:
        - task_type
        - task_no
        - parent_no
        - role_no
        - text
        - is_optional
      properties:
        task_type:
          type: string
          enum:
            - twiq.basic.task
            - twiq.numbered.list
            - twiq.bullet.list
          example: twiq.basic.task
        task_no:
          type: integer
          format: int32
          minimum: 5001
          maximum: 8000
          description: |
            The task number for this task. Unique within each process.
            The "root task" for a process MUST be task 5001.

            Task 5001 is not visible in the TeamworkIQ web application;
            the "top-level" tasks shown in the web application are the
            children of task 5001.
          example: 5004
        parent_no:
          type: integer
          format: int32
          minimum: 5001
          maximum: 8000
          description: |
            The task number of this task's parent.

            The "root task" MUST NOT have a parent. Every other task MUST have a
            parent.

            The "root task" (task 5001) is not visible in the TeamworkIQ web
            application; the "top-level" tasks that are visible in the web
            application are the tasks whose parent is this invisible root task.

            Task hierarchies cannot be deeper than 6 levels.

            Cycles are forbidden. So if the parent of task 5005 is task 5004,
            and the parent of task 5004 is 5003, then the parent of 5003 MUST NOT
            be 5005.
          example: 5001
        role_no:
          type: integer
          format: int32
          minimum: 1001
          maximum: 3000
          description: |
            The role number of the role that is responsible for completing
            this task.

            If a task's role_no is not specified, then the task inherits its
            parent's role number.
          example: 2001
        text:
          type: string
          format: markup_and_vars
          description: |
            This is the task text. It may contain markup
            and variable expressions that refer to fields
            from earlier tasks or to built-in vars.

            Task text SHOULD be relatively brief.
          example: "Lorem ipsum <br/>dolor sit: {amet}"
        instructions:
          type: string
          format: markup
          description: This is the task instructions. It may contain markup.
          example: "Lorem ipsum <br/>dolor sit amet."
        due_at:
          $ref: "#/components/schemas/DateSettings"
        form:
          $ref: "#/components/schemas/FormDefinition"
        is_optional:
          type: boolean
          description: |
            If is_optional is true, then this task may be skipped. Otherwise,
            skipping is forbidden.
          example: true
        is_strict:
          type: boolean
          description: Reserved for future use
          example: false
    ProcessActivityType:
      type: string
      enum:
        - PROC_STARTED
        - PROC_STOPPED
        - PROC_PUBLISHED
        - PROC_EDITED
        - PROC_REVERTED
        - PROC_TAGGED
        - PROC_UNTAGGED
        - PROC_COMPLETED
        - TASK_STARTED
        - TASK_PAUSED
        - TASK_COMPLETED
        - TASK_SKIPPED
        - TASK_REOPENED
        - TASK_ALARM
        - TASK_ACTIONABLE
        - DATA_PUBLISHED
        - DATA_UNPUBLISHED
        - OWNER_ADDED
        - OWNER_REMOVED
        - ROLE_ACCEPTED
        - ROLE_REFUSED
      description: Specifies the type of activity.
      example: TASK_COMPLETED
    ProcessActivityResp:
      type: object
      required:
        - activity_id
        - activity_at_time
        - activity_by
        - activity_type
        - process_no
        - request_id
      properties:
        activity_id:
          type: string
          description: Opaque activity ID string
          example: 507176.12345
        activity_at_time:
          type: integer
          format: int64
          description: |
            Time when the activity occurred.
            Number of msec since midnight Jan 1, 1970 UTC
          example: 1581001439775
        activity_by:
          type: integer
          format: int64
          description: |
            The user who performed the activity. Specifies EITHER:

             - TeamworkIQ user number of a human user in the account OR

             - `acting_as` number that specifies the robot user that belongs
               to an App in the Integration Center

             - zero, which specifies that the activity was performed
               automatically by TeamworkIQ. For example, TASK_ACTIONABLE
               events are performed by the TeamworkIQ system rather than
               by a human user or robot.

          example: 54321
        activity_type:
          $ref: "#/components/schemas/ProcessActivityType"
        process_no:
          type: integer
          format: int32
          description: Process number. This is unique within the account.
          example: 1234
        task_no:
          type: integer
          minimum: 5001
          maximum: 8000
          description: Task number with which the activity is associated
          example: 5002
        template_no:
          type: integer
          format: int32
          description: Template number from which the process was launched
          example: 12345
        request_id:
          type: string
          format: name
          description: |
            Request ID with which the activity is associated. Request IDs
            identify client REST requests. This allows you to determine
            which activities result from the same REST request.

            If the REST request that performs an activity does not specify
            an X-Request-ID header, then the server uses a timestamp string
            by default.
          example: '1590607202229'
        parameters:
          type: object
          properties:
            role_no:
              type: integer
              minimum: 1001
              maximum: 3000
              description: Included with role-related activities to specify the role number
              example: 2001
            asg_to_user:
              type: integer
              format: int64
              description: |
                Included with OWNER_ADDED, OWNER_REMOVED events to specify
                the added or removed assignee
              example: 54321
            expl:
              type: string
              description: |
                Included with activities, such as PUBLISH, which allow the
                requester to provide an explanation.
              example: "Lorem ipsum dolor sit amet."
            tags:
              type: string
              format: csv
              description: |
                Included with PROC_TAGGED, PROC_UNTAGGED.
                Specifies as a comma-separated value string the first 100
                characters of the newly-added or newly-removed tags
              example: "lorem,ipsum"
            due_at_time:
              type: integer
              format: int64
              description: |
                Included with TASK_ALARM.

                Specifies the due date that triggered the task alarm.
                Number of msec since midnight Jan 1, 1970 UTC
              example: 1581001439775
            alarm:
              type: string
              enum:
                - LATE
              description: |
                Included with TASK_ALARM.

                Specifies that the activity marks the time when this
                alarm was triggered.
              example: LATE
          description: Additional activity-specific parameters
          example:
            role_no: 2001
            name: Employee

    FileDownloadInfo:
      type: object
      description: |
        A FileDownloadInfo object specifies a short-lived
        download URI for the file.
      required:
        - download_url
      properties:
        download_url:
          type: string
          format: uri
          description: |
            This is a short-lived download URI for the file.
            It is an S3 "Signed URI". It expires after 15 minutes.
          example: "https://twiq-zstaging-1-attachments.s3.amazonaws.com/xxxxx...xxxxx/12345/123?xxxxx...xxxxx"
  securitySchemes:
    api_key:
      description: |
        To use TeamworkIQ's RESTful API, you need a valid API Key.

        ### Getting an API Key

        See [How to Get a TeamworkIQ API Key](https://help.teamworkiq.com/en/articles/3625469-how-to-get-an-api-key).

        ### Securing your API Key

        See [Securing your API Key](https://help.teamworkiq.com/en/articles/3683294-securing-your-api-keys).

        ### Making Requests with your API Key

        Every HTTPS request that a client sends to the TeamworkIQ API must include
        an `x-api-key` request header whose value is the API Key. You do NOT need
        to base64-encode the key.
      type: "apiKey"
      name: "x-api-key"
      in: "header"
